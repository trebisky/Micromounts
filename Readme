I began work on this in March of 2018,
then dropped it until February of 2019.
I got it to a usable state 4-28-2019

See /home/tom/bin for the scripts micros and micros2
See /u1/rails/micromounts (which should still work).
The micros script runs this project.
The micros2 script runs the old and bogus rails thing

The database itself is minerals.sqlite3 (297984 bytes).
This is a verbatim copy of /u1/rails/micromounts/db/development.sqlite3

Ruby GTK, and in particular gtk3 seems to be almost an orphaned project.
Documentation is almost non-existant, but we get by.
However, if this falls off the wagon in the future, we might have
to port this whole project to Python-GTK.
This would be an option if all hell breaks loose.

Also, I have in no way investigated the issues involved with
starting from scratch with the database.  I just copied the
rails database and began working with it.  This has worked out
fine for me, but some other person would want to set up the
database with an appropriate schema and start creating records,
maybe even import records from a CSV file.  Since this is not
any kind of need of mine, I may never get around to tackling
this, but it would be a matter of working with sqlite3 via the
command line tool they provide.

----------------------------------------------------

In the process of testing, I had inserted several bogus records that
I now want to remove.  I managed this by using the DUMP command to get
an ascii text "dump" file (just SQL) and then using an editor (vi) to
delete the two offending insert lines.  It went like this:

sqlite3 minerals.sqlite3
.output minerals.sql
.dump
.exit

vi minerals.sql
(delete the undesired records)

mv minerals.sqlite3 minerals.OLD
sqlite3 minerals.sqlite3 <minerals.sql

This seemed to work just fine.

----------------------------------------------------

The bigger Euro box labels now allow for 5 lines of location information.

If we have more than 5 lines (which would be quite unusual),
the following rules apply:
 - the first line is always used
 - the next few lines are deleted, so as to yield only 5 overall.

If this won't yield satisfactory results, the syntax described
 in the next section can be used to take control

----------------------------------------------------

So what about this markup I have in the location information
to allow some control over labels?

* First the location record is split on commas.
* any line starting with a "-" will not show on the label
* a semicolon does not split the line, but gets turned
    into a comman (this allows commas on a line, as well as
    a way to join two things on one line with a comma.


--- Other notes

Only one word in the species field is used on a label,
so a variety in parenthesis is fine, but won't appear on the label.
