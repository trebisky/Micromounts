#!/bin/python3

# admin
# database administrationfor the micromount database

# Tom Trebisky  8-10-2024

import os
import sqlite3
import datetime

# I am double minded.  We could always convert to a hash and
# reference fields by name in that way, or we can leave the row
# data in a tuple and use these indices.
#
# Never mind what they say, the only sane way to deal with this is
# to use "from Micros import *" in each file that needs this.
# I have no remorse.  I am the only one who will use this, AND
# there is a small and well known set of items that will get
# imported.
m_ID = 0
m_MYID = 1
m_SPECIES = 2
m_ASSOCIATIONS = 3
m_ASS = 3
m_LOCATION = 4
m_LOC = 4
m_NOTES = 5
m_ORIGIN = 6
m_SOURCE = 7
m_OWNER = 8
m_STATUS = 9
m_COLLECTION = 10
m_CREATED = 11
m_UPDATED = 12

# Convert array to hash.
# A more general way would use the schema for this.
#def to_hash ( mount ) :
#        hash = {}
#        hash['id'] = mount[0]
#        hash['myid'] = mount[1]
#        hash['species'] = mount[2]
#        hash['associations'] = mount[3]
#        hash['location'] = mount[4]
#        hash['notes'] = mount[5]
#        hash['origin'] = mount[6]
#        hash['source'] = mount[7]
#        hash['owner'] = mount[8]
#        hash['status'] = mount[9]
#        hash['label_info'] = mount[10] << Collection
#        hash['created_at'] = mount[11]
#        hash['updated_at'] = mount[12]
#        return hash

class Micros :
    def __init__ ( self ) :
        self.conn = None
        self.data = []

        self.mypath = Micros.grog_path ()
        #print ( "Running from: ", self.mypath )

        db_path = self.mypath + "/" + "minerals.sqlite3"
        #db_path = self.mypath + "/" + "test.sqlite3"

        print ( "Database: ", db_path )


        try:
            self.conn = sqlite3.connect ( db_path )
        except OSError as e:
            print(e)

        self.__get_all ()

        print ( f"{len(self.data)} records in database" )

        ##self.__get_tags ()

        #print ( f"{len(self.data)} entries in database"  )

        # Handy place to call this for debugging
        # x = self.__gen_myid ()
        # print ( "Next myid = ", x )

    # tables gives:
    # ('schema_migrations',)
    # ('mounts',)
    # ('sqlite_sequence',)
    # ('labels',)

    # The "label_info" column is never used.
    # I want to change it to "collection"
    def fix_col1 ( self ) :
        cur = self.conn.cursor ()
        cmd = "ALTER TABLE mounts RENAME COLUMN label_info TO collection"
        cur.execute ( cmd )
        cur.close ()

    def tables ( self ) :
        cur = self.conn.cursor ()
        cmd = "SELECT name FROM sqlite_master WHERE type='table';"
        cur.execute ( cmd )
        tables = cur.fetchall ()
        cur.close ()

        for t in tables :
            print ( t )

    # schema gives:
    # (0, 'id', 'INTEGER', 1, None, 1)
    # (1, 'myid', 'varchar(255)', 0, None, 0)
    # (2, 'species', 'varchar(255)', 0, None, 0)
    # (3, 'associations', 'varchar(255)', 0, None, 0)
    # (4, 'location', 'varchar(255)', 0, None, 0)
    # (5, 'notes', 'TEXT', 0, None, 0)
    # (6, 'origin', 'varchar(255)', 0, None, 0)
    # (7, 'source', 'varchar(255)', 0, None, 0)
    # (8, 'owner', 'varchar(255)', 0, None, 0)
    # (9, 'status', 'varchar(255)', 0, None, 0)
    # (10, 'label_info', 'varchar(255)', 0, None, 0)
    # (11, 'created_at', 'datetime', 0, None, 0)
    # (12, 'updated_at', 'datetime', 0, None, 0)

    def schema ( self, table_name ) :
        cur = self.conn.cursor ()
        result = cur.execute ( "PRAGMA table_info('%s')" % table_name).fetchall()
        cur.close ()
        # return result

        for r in result :
            print ( r )

    # The idea here is to find out where this script is running
    # in order to generate an absolute path to find the database
    # as well as other resources
    # This currently gives me:
    # /u1/Minerals/Micromounts/python/labels
    @classmethod
    def grog_path ( cls ) :
        my_path = os.path.realpath ( __file__ )
        (path, file) = os.path.split ( my_path )
        #print ( path )
        return path

    def close ( self ) :
        self.conn.close ()

    def __get_all ( self ) :
        cur = self.conn.cursor ()
        cur.execute ( "SELECT * from mounts" )
        self.data = cur.fetchall ()
        cur.close ()

    def dump1 ( self ) :
        index = 858
        print ( self.data[index] )
        x = self.data[index]
        print ( x[1] )
        print ( x[m_MYID] )
        print ( x[10] )
        print ( x[m_COLLECTION] )
        coll = x[m_COLLECTION]
        if coll != '':
            print ( f"{x[m_MYID]} ==> {coll}" )

    def dump ( self ) :
        for x in self.data :
            coll = x[m_COLLECTION]
            #print ( coll )
            if coll != '' and coll != None :
                print ( f"{x[m_ID]} ==> {coll}" )
    def dump2 ( self ) :
        for x in self.data :
            coll = x[m_COLLECTION]
            #print ( coll )
            if coll != 'main' :
                print ( x )
                return

    # This takes about 80 seconds wall clock time
    def load_coll ( self ) :
        for x in self.data :
            id = x[m_ID]
            self.update_one ( id, 'collection', 'main' )

    def update_one ( self, id, name, val ) :
        cmd = "UPDATE mounts SET "
        cmd += f"{name}='{val}',"
        cmd += "updated_at=CURRENT_TIMESTAMP "
        cmd += f"WHERE id={id}"

        #print ( cmd )
        cur = self.conn.cursor ()

        try:
            cur.execute ( cmd )
        except sqlite3.Error as er:
            print ( "Update One gave SQL error" )
            print(er.sqlite_errorcode)
            print(er.sqlite_errorname)

        cur.close ()
        self.conn.commit ()

        # Caller will use "all() to reread data
        #self.refresh ()

        #print ( "Update ONE done" )

    # A one time check.
    # look for duplicate values among myid
    def validate ( self ) :
        for x in self.data :
            count = 0
            for y in self.data :
                if x[1] == y[1] :
                    count += 1
                    if count > 1 :
                        print ( "Dup: ", x[1] )
                        print ( x )
                        print ( y )


m = Micros ()
print ( "-- Tables:" )
m.tables ()
print ( "" )
print ( "-- Schema for mounts:" )
m.schema ( "mounts" )

#print ( "" )
#print ( "-- Schema for mounts after:" )
#m.schema ( "mounts" )

#m.dump1 ()
#m.dump2 ()
#m.dump ()

print ( "fixing" )
m.fix_col1 ()
print ( "fixing done" )

print ( "loading" )
m.load_coll ()
print ( "loading done" )

m.close ()

# THE END
